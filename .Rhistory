runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
feature_long |>group_by(song_id, features, value) |>
summarize(
weeks_on_chart_max = max(weeks_on_chart, na.rm = TRUE),
is_more_than_52 = if_else(weeks_on_chart_max >= 52, "More than or equal 52 weeks", "Less than 52 weeks")
) |>
na.omit() |>
filter(features %in% c("energy", "acousticness", "danceability", "speechiness"))
feature_long |>group_by(song_id, features, value) |>
summarize(
weeks_on_chart_max = max(weeks_on_chart, na.rm = TRUE),
is_more_than_52 = if_else(weeks_on_chart_max >= 52, "More than or equal 52 weeks", "Less than 52 weeks")
) |>
na.omit() |>
filter(features %in% c("energy", "acousticness", "danceability", "speechiness"))
feature_long |>group_by(song_id, features, value) |>
summarize(
weeks_on_chart_max = max(weeks_on_chart, na.rm = TRUE),
is_more_than_52 = if_else(weeks_on_chart_max >= 52, "More than or equal 52 weeks", "Less than 52 weeks")
) |>
na.omit() |>
filter(features %in% c("energy", "acousticness", "danceability", "speechiness"))
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
# Update the selectize input with filtered performer names
updateSelectizeInput(session, "performer",
choices = unique(sort(performers_filtered)),
server = TRUE
)
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
glimpse(feature_long)
runApp('inst/shiny-app')
billboard
audio_features
audio_features |>
select(spotify_track_popularity, energy, acousticness, danceability, speechiness) |>
pivot_longer(cols = c(energy, acousticness, danceability, speechiness),
names_to = "feature", values_to = "value") |>
filter(!is.na(value), !is.na(spotify_track_popularity))
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
feature_long
library(GGally)
audio_features %>%
select(energy, acousticness, danceability, speechiness)
audio_features %>%
select(energy, acousticness, danceability, speechiness,spotify_track_popularity)
audio_features %>%
select(energy, acousticness, danceability, speechiness,spotify_track_popularity) %>%
ggscatmat()
genre_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
group_by(spotify_genre, features) %>%
summarize(mean_value = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = features, values_from = mean_value)
# Apply PCA
pca <- prcomp(genre_data[,-1], scale. = TRUE)  # Exclude genre names
View(genre_data)
genre_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
mutate(extracted_genre = str_extract_all(spotify_genre, "'([^']*)'")) %>%
unnest(extracted_genre) %>%
mutate(extracted_genre = gsub("'", "", extracted_genre)) %>%
group_by(extracted_genre, features) %>%
summarize(mean_value = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = features, values_from = mean_value)
# Apply PCA
pca <- prcomp(genre_data[,-1], scale. = TRUE)  # Exclude genre names
View(genre_data)
genre_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
mutate(extracted_genre = str_extract_all(spotify_genre, "'([^']*)'")) %>%
unnest(extracted_genre) %>%
mutate(extracted_genre = gsub("'", "", extracted_genre)) %>%
group_by(extracted_genre, features) %>%
summarize(mean_value = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = features, values_from = mean_value) %>%
na.omit()
# Apply PCA
pca <- prcomp(genre_data[,-1], scale. = TRUE)  # Exclude genre names
pca_data <- as.data.frame(pca$x[,1:2])  # First two principal components
pca_data$genre <- genre_data$spotify_genre
ggplot(pca_data, aes(x = PC1, y = PC2, label = genre)) +
geom_point() +
geom_text_repel() +
labs(title = "Genre Clustering Based on Audio Features", x = "Principal Component 1", y = "Principal Component 2") +
theme_minimal()
genre_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
mutate(extracted_genre = str_extract_all(spotify_genre, "'([^']*)'")) %>%
unnest(extracted_genre) %>%
mutate(extracted_genre = gsub("'", "", extracted_genre)) %>%
group_by(extracted_genre, features) %>%
summarize(mean_value = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = features, values_from = mean_value) %>%
na.omit()
# Apply PCA
pca <- prcomp(genre_data[,-1], scale. = TRUE)  # Exclude genre names
pca_data <- as.data.frame(pca$x[,1:2])  # First two principal components
pca_data$genre <- genre_data$extracted_genre
ggplot(pca_data, aes(x = PC1, y = PC2, label = genre)) +
geom_point() +
geom_text_repel() +
labs(title = "Genre Clustering Based on Audio Features", x = "Principal Component 1", y = "Principal Component 2") +
theme_minimal()
library(ggrepel)
genre_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
mutate(extracted_genre = str_extract_all(spotify_genre, "'([^']*)'")) %>%
unnest(extracted_genre) %>%
mutate(extracted_genre = gsub("'", "", extracted_genre)) %>%
group_by(extracted_genre, features) %>%
summarize(mean_value = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = features, values_from = mean_value) %>%
na.omit()
# Apply PCA
pca <- prcomp(genre_data[,-1], scale. = TRUE)  # Exclude genre names
pca_data <- as.data.frame(pca$x[,1:2])  # First two principal components
pca_data$genre <- genre_data$extracted_genre
ggplot(pca_data, aes(x = PC1, y = PC2, label = genre)) +
geom_point() +
geom_text_repel() +
labs(title = "Genre Clustering Based on Audio Features", x = "Principal Component 1", y = "Principal Component 2") +
theme_minimal()
genre_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
mutate(extracted_genre = str_extract_all(spotify_genre, "'([^']*)'")) %>%
unnest(extracted_genre) %>%
mutate(extracted_genre = gsub("'", "", extracted_genre)) %>%
group_by(extracted_genre, features) %>%
summarize(n=n(),mean_value = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = features, values_from = mean_value) %>%
na.omit()
View(genre_data)
genre_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
mutate(extracted_genre = str_extract_all(spotify_genre, "'([^']*)'")) %>%
unnest(extracted_genre) %>%
mutate(extracted_genre = gsub("'", "", extracted_genre)) %>%
group_by(extracted_genre, features) %>%
summarize(n=n(),mean_value = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = features, values_from = mean_value) %>%
arrnage(-n) %>%
head(50)%>%
na.omit()
genre_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
mutate(extracted_genre = str_extract_all(spotify_genre, "'([^']*)'")) %>%
unnest(extracted_genre) %>%
mutate(extracted_genre = gsub("'", "", extracted_genre)) %>%
group_by(extracted_genre, features) %>%
summarize(n=n(),mean_value = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = features, values_from = mean_value) %>%
arrange(-n) %>%
head(50)%>%
na.omit()
# Apply PCA
pca <- prcomp(genre_data[,-1], scale. = TRUE)  # Exclude genre names
pca_data <- as.data.frame(pca$x[,1:2])  # First two principal components
pca_data$genre <- genre_data$extracted_genre
ggplot(pca_data, aes(x = PC1, y = PC2, label = genre)) +
geom_point() +
geom_text_repel() +
labs(title = "Genre Clustering Based on Audio Features", x = "Principal Component 1", y = "Principal Component 2") +
theme_minimal()
ggplot(pca_data, aes(x = PC1, y = PC2, label = genre)) +
geom_point() +
geom_text_repel() +
labs(title = "Genre Clustering Based on Audio F
# Step 1: Prepare genre data with average popularity
genre_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
# Step 1: Prepare genre data with average popularity
genre_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
mutate(extracted_genre = str_extract_all(spotify_genre, "'([^']*)'")) %>%
unnest(extracted_genre) %>%
mutate(extracted_genre = gsub("'", "", extracted_genre)) %>%
group_by(extracted_genre, features) %>%
summarize(
n = n(),
mean_value = mean(value, na.rm = TRUE),
avg_popularity = mean(spotify_track_popularity, na.rm = TRUE),  # Calculate average popularity
.groups = "drop"
) %>%
pivot_wider(names_from = features, values_from = mean_value) %>%
arrange(-n) %>%
head(50) %>%
na.omit()
# Step 2: Apply PCA
pca <- prcomp(genre_data[,-c(1, 4)], scale. = TRUE)  # Exclude genre names and avg_popularity
pca_data <- as.data.frame(pca$x[, 1:2])  # First two principal components
pca_data$genre <- genre_data$extracted_genre
pca_data$avg_popularity <- genre_data$avg_popularity  # Add average popularity
# Step 3: Create PCA plot colored by average Spotify popularity
ggplot(pca_data, aes(x = PC1, y = PC2, label = genre, color = avg_popularity)) +
geom_point(size = 3) +  # Adjust point size as needed
geom_text_repel(max.overlaps = 10) +  # Limit overlaps for text labels
labs(title = "Genre Clustering Based on Audio Features",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Average Popularity") +
scale_color_gradient(low = "blue", high = "red") +  # Gradient from low to high popularity
theme_minimal()
heatmap_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
mutate(extracted_genre = str_extract_all(spotify_genre, "'([^']*)'")) %>%
unnest(extracted_genre) %>%
mutate(extracted_genre = gsub("'", "", extracted_genre)) %>%
group_by(extracted_genre, features) %>%
summarize(
avg_popularity = mean(spotify_track_popularity, na.rm = TRUE),
.groups = "drop"
) %>%
pivot_wider(names_from = features, values_from = avg_popularity) %>%
na.omit()
# Step 2: Create the heatmap
heatmap_plot <- ggplot(heatmap_data, aes(x = extracted_genre, y = features)) +
geom_tile(aes(fill = avg_popularity), color = "white") +
scale_fill_gradient(low = "blue", high = "red", name = "Avg Popularity") +
labs(title = "Average Spotify Popularity by Genre and Audio Feature",
x = "Genre", y = "Audio Feature") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Render the heatmap
print(heatmap_plot)
# Step 1: Prepare data for bar plot
bar_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
mutate(extracted_genre = str_extract_all(spotify_genre, "'([^']*)'")) %>%
unnest(extracted_genre) %>%
mutate(extracted_genre = gsub("'", "", extracted_genre)) %>%
group_by(extracted_genre, features) %>%
summarize(
avg_popularity = mean(spotify_track_popularity, na.rm = TRUE),
.groups = "drop"
)
# Step 2: Create the bar plot
bar_plot <- ggplot(bar_data, aes(x = extracted_genre, y = avg_popularity, fill = features)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "Average Spotify Popularity by Genre and Audio Feature",
x = "Genre", y = "Average Popularity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.title = element_blank())
# Render the bar plot
print(bar_plot)
genre_data
library(ggplot2)
library(reshape2)  # For reshaping the data
# Reshape the data for the heatmap
heatmap_data <- genre_data %>%
select(extracted_genre, acousticness, danceability, energy, speechiness, avg_popularity) %>%
melt(id.vars = "extracted_genre", variable.name = "features", value.name = "value")
# Create the heatmap
heatmap_plot <- ggplot(heatmap_data, aes(x = extracted_genre, y = features)) +
geom_tile(aes(fill = value), color = "white") +
scale_fill_gradient(low = "blue", high = "red", name = "Value") +
labs(title = "Audio Features Heatmap by Genre",
x = "Genre", y = "Audio Features") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Render the heatmap
print(heatmap_plot)
heatmap_plot
View(heatmap_data)
# Create a bar plot for average popularity by genre and audio feature
bar_plot <- ggplot(genre_data, aes(x = extracted_genre, y = avg_popularity, fill = extracted_genre)) +
geom_bar(stat = "identity") +
labs(title = "Average Popularity by Genre",
x = "Genre", y = "Average Popularity") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
# Render the bar plot
print(bar_plot)
# Melt data for scatter plot
scatter_data <- genre_data %>%
select(extracted_genre, acousticness, danceability, energy, speechiness, avg_popularity) %>%
pivot_longer(cols = c(acousticness, danceability, energy, speechiness),
names_to = "features", values_to = "value")
# Create the scatter plot
scatter_plot <- ggplot(scatter_data, aes(x = value, y = avg_popularity, color = features)) +
geom_point(size = 3) +
geom_smooth(method = "lm", se = FALSE) +  # Add a linear model line
labs(title = "Audio Features vs. Average Popularity by Genre",
x = "Feature Value", y = "Average Popularity") +
theme_minimal() +
theme(legend.title = element_blank())
# Render the scatter plot
print(scatter_plot)
genre_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
mutate(extracted_genre = str_extract_all(spotify_genre, "'([^']*)'")) %>%
unnest(extracted_genre) %>%
mutate(extracted_genre = gsub("'", "", extracted_genre)) %>%
group_by(extracted_genre, features) %>%
summarize(n=n(),mean_value = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = features, values_from = mean_value) %>%
arrnage(-n) %>%
head(50)%>%
na.omit()
genre_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
mutate(extracted_genre = str_extract_all(spotify_genre, "'([^']*)'")) %>%
unnest(extracted_genre) %>%
mutate(extracted_genre = gsub("'", "", extracted_genre)) %>%
group_by(extracted_genre, features) %>%
summarize(n=n(),mean_value = mean(value, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = features, values_from = mean_value) %>%
arrange(-n) %>%
head(50)%>%
na.omit()
# Apply PCA
pca <- prcomp(genre_data[,-1], scale. = TRUE)  # Exclude genre names
pca_data <- as.data.frame(pca$x[,1:2])  # First two principal components
pca_data$genre <- genre_data$extracted_genre
ggplot(pca_data, aes(x = PC1, y = PC2, label = genre)) +
geom_point() +
geom_text_repel() +
labs(title = "Genre Clustering Based on Audio Features", x = "Principal Component 1", y = "Principal Component 2") +
theme_minimal()
feature_long
library(ggplot2)
library(reshape2)
genre_data_melted <- melt(genre_data, id.vars = "extracted_genre", variable.name = "feature", value.name = "mean_value")
ggplot(genre_data_melted, aes(x = extracted_genre, y = feature, fill = mean_value)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Mean Audio Features by Genre", x = "Genre", y = "Feature") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
genre_data_melted %>%
filter(extracted_genre %in% input$selected_genre) %>%
plot_ly(x = ~extracted_genre, y = ~mean_value, color = ~feature, type = 'bar',
text = ~paste("Mean Value:", mean_value),
hoverinfo = "text") %>%
layout(title = "Mean Audio Features by Genre",
xaxis = list(title = "Genre"),
yaxis = list(title = "Mean Value"),
barmode = 'group')
genre_data_melted %>%
plot_ly(x = ~extracted_genre, y = ~mean_value, color = ~feature, type = 'bar',
text = ~paste("Mean Value:", mean_value),
hoverinfo = "text") %>%
layout(title = "Mean Audio Features by Genre",
xaxis = list(title = "Genre"),
yaxis = list(title = "Mean Value"),
barmode = 'group')
# Assuming you have 'energy' and 'danceability' as features
scatter_plot <- genre_data %>%
plot_ly(x = ~energy, y = ~danceability, color = ~extracted_genre,
type = 'scatter', mode = 'markers',
text = ~paste("Genre:", extracted_genre, "<br>Energy:", energy, "<br>Danceability:", danceability),
hoverinfo = "text") %>%
layout(title = "Energy vs. Danceability by Genre",
xaxis = list(title = "Energy"),
yaxis = list(title = "Danceability"))
scatter_plot
# Assuming you have 'energy' and 'danceability' as features
scatter_plot <- genre_data %>%
plot_ly(x = ~energy, y = ~danceability, group = ~extracted_genre,
type = 'scatter', mode = 'markers',
text = ~paste("Genre:", extracted_genre, "<br>Energy:", energy, "<br>Danceability:", danceability),
hoverinfo = "text") %>%
layout(title = "Energy vs. Danceability by Genre",
xaxis = list(title = "Energy"),
yaxis = list(title = "Danceability"))
scatter_plot
View(genre_data)
plot_ly(x = ~energy, y = ~danceability, group = ~extracted_genre, color = ~
feature_long
genre_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
mutate(extracted_genre = str_extract_all(spotify_genre, "'([^']*)'")) %>%
unnest(extracted_genre) %>%
mutate(extracted_genre = gsub("'", "", extracted_genre)) %>%
group_by(extracted_genre, features) %>%
summarize(n=n(),mean_value = mean(value, na.rm = TRUE), .groups = "drop",mean_pop = mean(spotify_track_popularity, na.rm= T)) %>%
pivot_wider(names_from = features, values_from = mean_value) %>%
arrange(-n) %>%
head(50)%>%
na.omit()
# Assuming you have 'energy' and 'danceability' as features
scatter_plot <- genre_data %>%
plot_ly(x = ~energy, y = ~danceability, group = ~extracted_genre, color = ~mean_pop
type = 'scatter', mode = 'markers',
# Assuming you have 'energy' and 'danceability' as features
scatter_plot <- genre_data %>%
plot_ly(x = ~energy, y = ~danceability, group = ~extracted_genre, color = ~mean_pop,
type = 'scatter', mode = 'markers',
text = ~paste("Genre:", extracted_genre, "<br>Energy:", energy, "<br>Danceability:", danceability),
hoverinfo = "text") %>%
layout(title = "Energy vs. Danceability by Genre",
xaxis = list(title = "Energy"),
yaxis = list(title = "Danceability"))
scatter_plot
genre_data <- feature_long %>%
filter(features %in% c("energy", "acousticness", "danceability", "speechiness")) %>%
mutate(extracted_genre = str_extract_all(spotify_genre, "'([^']*)'")) %>%
unnest(extracted_genre) %>%
mutate(extracted_genre = gsub("'", "", extracted_genre)) %>%
group_by(extracted_genre, features) %>%
summarize(n=n(),mean_value = mean(value, na.rm = TRUE), .groups = "drop",mean_pop = mean(spotify_track_popularity, na.rm= T)) %>%
pivot_wider(names_from = features, values_from = mean_value) %>%
arrange(-n) %>%
head(50)%>%
na.omit()
genre_data %>%
plot_ly(x = ~energy, y = ~danceability, group = ~extracted_genre, color = ~mean_pop,
type = 'scatter', mode = 'markers',
text = ~paste("Genre:", extracted_genre, "<br>Energy:", energy, "<br>Danceability:", danceability),
hoverinfo = "text") %>%
layout(title = "Energy vs. Danceability by Genre",
xaxis = list(title = "Energy"),
yaxis = list(title = "Danceability"))
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
genre_data
runApp('inst/shiny-app')
genre_data
runApp('inst/shiny-app')
gplot(genre_data, aes(x = input$x_var,
y = input$y_var,
group = extracted_genre,
color = mean_pop)) +
geom_point(size = 3, alpha = 0.7) +
labs(x = input$x_var, y = input$y_var) +
theme_minimal()
ggplot(genre_data, aes(x = input$x_var,
y = input$y_var,
group = extracted_genre,
color = mean_pop)) +
geom_point(size = 3, alpha = 0.7) +
labs(x = input$x_var, y = input$y_var) +
theme_minimal()
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
billboard
audio_features
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
?    fluidRow(
)
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
devtools::load_all()
shiny::runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
devtools::load_all
devtools::load_all()
shiny::runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
runApp('inst/shiny-app')
